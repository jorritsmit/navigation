#!/usr/bin/env python
# DWA Planner configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t
from local_planner_limits import add_generic_localplanner_params

gen = ParameterGenerator()


# This unusual line allows to reuse existing parameter definitions
# that concern all localplanners
add_generic_localplanner_params(gen)

# Forward simulation parameters
gen.add("sim_time", double_t, 0, "The amount of time to roll trajectories out for in seconds", 1.7, 0)
gen.add("sim_period", double_t, 0, "Period in which acceleration is allowed. 1 / sim_period should be smaller than the controller frequency.", 0.2, 0)

gen.add("sim_granularity", double_t, 0, "The granularity with which to check for collisions along each trajectory in meters", 0.05, 0)
gen.add("angular_sim_granularity", double_t, 0, "The granularity with which to check for collisions for rotations in radians", 0.1, 0)

gen.add("vx_samples", int_t, 0, "The number of samples to use when exploring the x velocity space", 3, 1)
gen.add("vy_samples", int_t, 0, "The number of samples to use when exploring the y velocity space", 10, 1)
gen.add("vth_samples", int_t, 0, "The number of samples to use when exploring the theta velocity space", 20, 1)

gen.add("use_dwa", bool_t, 0, "Use dynamic window approach to constrain sampling velocities to small window.", True)

# Switching behavior
gen.add("switch_goal_distance", double_t, 0, "If the distance to the global goal is smaller, different parameters are selected", 0.5, 0.0, 2.0)
gen.add("switch_plan_distance", double_t, 0, "If the distance to the plan is larger, different parameters are selected", 0.5, 0.0, 2.0)
gen.add("switch_yaw_error", double_t, 0, "If the yaw error of the robot w.r.t. the plan is larger, different parameters are selected", 1.6, 0.0, 3.14)

# Cost functions
# TODO

exit(gen.generate("dwa_local_planner", "dwa_local_planner", "DWAPlanner"))
